import React, {useMemo, useState, useEffect} from 'react';
import {useReactTable, getCoreRowModel, ColumnDef, flexRender} from '@tanstack/react-table';
import {IdeaSubmissionDto, Accuracy} from '../core/_models';
import {ideaSubmissionsColumns} from './table/columns/_columns';
import {KTCardBody, KTCard} from '../../../../_metronic/helpers';
import {KTIcon} from '../../../../_metronic/helpers';
import {useFormik} from 'formik';
import * as Yup from 'yup';
import {createIdeaSubmission, getAllIdeaSubmissions, updateIdeaSubmissionAccuracy} from '../core/_requests';
import clsx from 'clsx';
import { getAllSubmissions, updateSubmissionAccuracy, searchIdeaSubmissions } from '../../auth/core/_requests';
import { toast } from 'react-toastify';
import Swal from 'sweetalert2'; // Import SweetAlert2
import ChangeAccuracyModal from './ChangeAccuracyModal'; // Import the new modal
import { PermissionEnums, decryptToJwt, getToken } from '../../auth/core/_requests';
// import {toast} from 'react-toastify'; // Uncomment and configure your toast library

// Define a type for the table data
type IdeaSubmissionTableData = IdeaSubmissionDto[];

// Define initial form values for the modal
const initialIdeaSubmissionValues: IdeaSubmissionDto = {
    // id: 0, // Assuming id is generated by the backend
    fullName: '',
    ideaName: '',
    email: '',
    phoneNumber: '',
    ideaSummary: '',
    howDidYouHearAboutUs: '',
    filePath: undefined, // File input field

    // Initialize new fields with default values, though they are not part of the form
    id: 0, // Default for number
    lastModifiedDate: '', // Default for string
    entryDate: '', // Default for string
    entryPerson: '', // Default for string
    accuracy: 1,
    tags: ''
};

// Define validation schema using Yup
const ideaSubmissionSchema = Yup.object().shape({
    fullName: Yup.string().required('نام کامل الزامی است'),
    ideaName: Yup.string().required('عنوان ایده الزامی است'),
    email: Yup.string().email('فرمت ایمیل اشتباه است').required('ایمیل الزامی است'),
    phoneNumber: Yup.string().required('شماره تلفن الزامی است'),
    ideaSummary: Yup.string().required('خلاصه ایده الزامی است'),
    howDidYouHearAboutUs: Yup.string().required('نحوه آشنایی الزامی است'),
    // filePath is optional, no validation needed
});

interface AddIdeaSubmissionModalProps {
    show: boolean;
    onClose: () => void;
    onSuccess: () => void; // Callback to refresh the list after successful submission
}

const AddIdeaSubmissionModal: React.FC<AddIdeaSubmissionModalProps> = ({show, onClose, onSuccess}) => {
    const formik = useFormik<IdeaSubmissionDto>({
        initialValues: initialIdeaSubmissionValues,
        validationSchema: ideaSubmissionSchema,
        onSubmit: async (values, {setSubmitting, resetForm}) => {
            setSubmitting(true);
            try {
                // The createIdeaSubmission function should handle FormData creation for file upload
                // We only send the form fields, not the API response fields like id, dates, etc.
                const submissionPayload = {
                    fullName: values.fullName,
                    ideaName: values.ideaName,
                    email: values.email,
                    phoneNumber: values.phoneNumber,
                    ideaSummary: values.ideaSummary,
                    howDidYouHearAboutUs: values.howDidYouHearAboutUs,
                    filePath: values.filePath // This should be a File object or undefined
                } as IdeaSubmissionDto; // Cast to IdeaSubmissionDto for type safety, even if sending a subset

                await createIdeaSubmission(submissionPayload);
                resetForm();
                onSuccess(); // Call success callback to notify parent component
                // onClose(); // Close modal on success - parent should handle this based on onSuccess if needed
            } catch (error) {
                console.error('Error creating idea submission:', error);
                // TODO: Display a user-friendly error message (e.g., using a toast notification)
                // toast.error('خطا در ارسال ایده'); // Example toast
            } finally {
                setSubmitting(false);
            }
        },
    });

    // Reset form when modal is closed
    React.useEffect(() => {
        if (!show) {
            formik.resetForm();
        }
    }, [formik.resetForm, show]);

    if (!show) return null;

    // Prevent modal from closing when clicking outside (optional)
    const handleBackdropClick = (e: React.MouseEvent<HTMLDivElement>) => {
        if (e.target === e.currentTarget) {
            // Uncomment the line below to close modal on backdrop click
            // onClose();
        }
    };

    return (
        <div
            className="modal show" // Use 'show' class to make it visible
            id="kt_modal_add_idea_submission"
            tabIndex={-1}
            aria-hidden="true"
            role="dialog" // Add role for accessibility
            style={{ display: 'block', backgroundColor: 'rgba(0,0,0,0.5)' }} // Inline style for backdrop
            onClick={handleBackdropClick} // Handle clicks on the backdrop
        >
            <div className="modal-dialog modal-dialog-centered mw-650px">
                <div className="modal-content">
                    <form className="form" onSubmit={formik.handleSubmit} noValidate>
                        <div className="modal-header">
                            <h2 className="fw-bold">افزودن پیشنهاد ایده جدید</h2> {/* Translated */}
                            {/* Close button */}
                            <div onClick={onClose} className="btn btn-icon btn-sm btn-active-icon-primary">
                                <KTIcon iconName='cross' className='fs-1' />
                            </div>
                        </div>

                        <div className="modal-body scroll-y mx-lg-5 pb-15">
                            <div className="row g-5">
                                {/* Full Name */}
                                <div className="col-md-6 fv-row">
                                    <label className="required fs-6 fw-semibold mb-2">نام کامل</label>
                                    <input
                                        type="text"
                                        className={clsx('form-control form-control-solid', { 'is-invalid': formik.touched.fullName && formik.errors.fullName })}
                                        {...formik.getFieldProps('fullName')}
                                    />
                                    {formik.touched.fullName && formik.errors.fullName && (
                                        <div className="fv-plugins-message-container">
                                            <div className="fv-help-block">{formik.errors.fullName}</div>
                                        </div>
                                    )}
                                </div>

                                {/* Idea Name */}
                                <div className="col-md-6 fv-row">
                                    <label className="required fs-6 fw-semibold mb-2">عنوان ایده</label>
                                    <input
                                        type="text"
                                        className={clsx('form-control form-control-solid', { 'is-invalid': formik.touched.ideaName && formik.errors.ideaName })}
                                        {...formik.getFieldProps('ideaName')}
                                    />
                                    {formik.touched.ideaName && formik.errors.ideaName && (
                                        <div className="fv-plugins-message-container">
                                            <div className="fv-help-block">{formik.errors.ideaName}</div>
                                        </div>
                                    )}
                                </div>

                                {/* Email */}
                                <div className="col-md-6 fv-row">
                                    <label className="required fs-6 fw-semibold mb-2">ایمیل</label>
                                    <input
                                        type="email"
                                        className={clsx('form-control form-control-solid', { 'is-invalid': formik.touched.email && formik.errors.email })}
                                        {...formik.getFieldProps('email')}
                                    />
                                    {formik.touched.email && formik.errors.email && (
                                        <div className="fv-plugins-message-container">
                                            <div className="fv-help-block">{formik.errors.email}</div>
                                        </div>
                                    )}
                                </div>

                                {/* Phone Number */}
                                <div className="col-md-6 fv-row">
                                    <label className="required fs-6 fw-semibold mb-2">شماره تلفن</label>
                                    <input
                                        type="text"
                                        className={clsx('form-control form-control-solid', { 'is-invalid': formik.touched.phoneNumber && formik.errors.phoneNumber })}
                                        {...formik.getFieldProps('phoneNumber')}
                                    />
                                    {formik.touched.phoneNumber && formik.errors.phoneNumber && (
                                        <div className="fv-plugins-message-container">
                                            <div className="fv-help-block">{formik.errors.phoneNumber}</div>
                                        </div>
                                    )}
                                </div>

                                {/* How did you hear about us? */}
                                <div className="col-md-12 fv-row">
                                    <label className="required fs-6 fw-semibold mb-2">نحوه آشنایی با ما</label>
                                    <input
                                        type="text"
                                        className={clsx('form-control form-control-solid', { 'is-invalid': formik.touched.howDidYouHearAboutUs && formik.errors.howDidYouHearAboutUs })}
                                        {...formik.getFieldProps('howDidYouHearAboutUs')}
                                    />
                                    {formik.touched.howDidYouHearAboutUs && formik.errors.howDidYouHearAboutUs && (
                                        <div className="fv-plugins-message-container">
                                            <div className="fv-help-block">{formik.errors.howDidYouHearAboutUs}</div>
                                        </div>
                                    )}
                                </div>

                                {/* Idea Summary */}
                                <div className="col-md-12 fv-row">
                                    <label className="required fs-6 fw-semibold mb-2">خلاصه ایده</label>
                                    <textarea
                                        className={clsx('form-control form-control-solid', { 'is-invalid': formik.touched.ideaSummary && formik.errors.ideaSummary })}
                                        rows={4}
                                        {...formik.getFieldProps('ideaSummary')}
                                    ></textarea>
                                    {formik.touched.ideaSummary && formik.errors.ideaSummary && (
                                        <div className="fv-plugins-message-container">
                                            <div className="fv-help-block">{formik.errors.ideaSummary}</div>
                                        </div>
                                    )}
                                </div>

                                {/* File Upload */}
                                <div className="col-md-12 fv-row">
                                    <label className="fs-6 fw-semibold mb-2">فایل ضمیمه (اختیاری)</label>
                                    <input
                                        type="file"
                                        className="form-control form-control-solid"
                                        onChange={(event) => {
                                            if (event.currentTarget.files && event.currentTarget.files[0]) {
                                                formik.setFieldValue('filePath', event.currentTarget.files[0]);
                                            } else {
                                                 formik.setFieldValue('filePath', undefined);
                                            }
                                        }}
                                    />
                                     {/* No validation or error display needed for optional file */}
                                </div>
                            </div>
                        </div>

                        <div className="modal-footer">
                            <button type="button" className="btn btn-light me-3" onClick={onClose} disabled={formik.isSubmitting}>بستن</button>
                            <button type="submit" className="btn btn-primary" disabled={formik.isSubmitting || !formik.isValid || !formik.touched}>
                                {formik.isSubmitting ? (
                                    <span className="indicator-progress" style={{ display: 'block' }}>
                                        در حال ارسال...
                                        <span className="spinner-border spinner-border-sm align-middle ms-2"></span>
                                    </span>
                                ) : (
                                    <span className="indicator-label">ارسال ایده</span>
                                )}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
};

interface Props {
  className?: string;
  onlyMine?: boolean;
  onViewDetails?: (id: number) => void;
}

const IdeaSubmissionsList: React.FC<Props> = ({ className = '', onlyMine = false, onViewDetails }) => {
    const [ideaSubmissionsData, setIdeaSubmissionsData] = useState<IdeaSubmissionTableData>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [searchTerm, setSearchTerm] = useState<string>(''); // State for search input

    const handleAccuracyChange = async (id: number, accuracy: number) => {
        const newAccuracy = accuracy == 1? 2 : 1;
        try {
            await updateSubmissionAccuracy(id, newAccuracy);
            fetchIdeaSubmissions(); // Refresh the list after successful update
            toast.success('وضعیت ایده با موفقیت تغییر یافت'); // Translated success message

        } catch (err) {
            console.error('Error updating idea submission accuracy:', err);
            toast.error('خطا در تغییر وضعیت ایده'); // Translated error message
        }
    };

    // Pass the handler to the columns definition
    const columns: ColumnDef<IdeaSubmissionDto>[] = useMemo(() => ideaSubmissionsColumns({ 
      onAccuracyChangeClick: handleAccuracyChange,
      onViewDetails
    }), [handleAccuracyChange, onViewDetails]);

    const fetchIdeaSubmissions = async () => {
        setIsLoading(true);
        setError(null);
        try {
            let data;
            if (onlyMine) {
                // فرض بر این است که تابع getAllSubmissions فقط ایده‌های کاربر را برمی‌گرداند یا باید تابع جداگانه‌ای بنویسید
                data = await getAllSubmissions();
            } else {
                data = await getAllSubmissions();
            }
            setIdeaSubmissionsData(data);
        } catch (err) {
            const errorMessage = 'خطا در بارگذاری لیست پیشنهادات ایده';
            toast.error(errorMessage);
        } finally {
            setIsLoading(false);
        }
    };

    // New function to handle search
    const performSearch = async () => {
        setIsLoading(true);
        setError(null);
        try {
            const data = await searchIdeaSubmissions(searchTerm); // Use the placeholder search function
            setIdeaSubmissionsData(data);
        } catch (err) {
            console.error('Error searching idea submissions:', err);
            const errorMessage = 'خطا در جستجوی پیشنهادات ایده'; // Translated error message
            toast.error(errorMessage);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        if (searchTerm === '') {
            fetchIdeaSubmissions(); // Fetch all data if search term is empty
        }
    }, [searchTerm]); // Refetch all data when search term becomes empty

    // Effect to perform search when Enter is pressed (handled in onKeyDown)
    // No separate effect needed for search execution itself if handled by event listener

    const table = useReactTable<IdeaSubmissionDto>({
        data: ideaSubmissionsData,
        columns,
        getCoreRowModel: getCoreRowModel(),
        // Add getRowId to help React Table identify rows uniquely if not using 'id' as default
        getRowId: (row) => String(row.id), // Assuming 'id' is unique and exists
    });

    const [showAddModal, setShowAddModal] = useState(false);

    const handleShowModal = () => setShowAddModal(true);
    const handleCloseModal = () => setShowAddModal(false);

    // Handle successful data creation - refresh the list
    const handleDataCreated = () => {
        console.log('New idea submission created successfully!');
        // TODO: Potentially show a success message (e.g., using a toast notification)
        // toast.success('ایده جدید با موفقیت ثبت شد!'); // Example toast
        fetchIdeaSubmissions(); // Refresh the list
        handleCloseModal(); // Close the modal after successful submission
    };

    const [showChangeAccuracyModal, setShowChangeAccuracyModal] = useState(false);
    const [selectedSubmissionId, setSelectedSubmissionId] = useState<number | null>(null);
    const [selectedSubmissionAccuracy, setSelectedSubmissionAccuracy] = useState<number | null>(null);

    const handleShowChangeAccuracyModal = (id: number, currentAccuracy: number) => {
        setSelectedSubmissionId(id);
        setSelectedSubmissionAccuracy(currentAccuracy);
        setShowChangeAccuracyModal(true);
    };

    const handleCloseChangeAccuracyModal = () => {
        setShowChangeAccuracyModal(false);
        setSelectedSubmissionId(null);
        setSelectedSubmissionAccuracy(null);
    };

    const handleUpdateAccuracySuccess = () => {
        fetchIdeaSubmissions();
        handleCloseChangeAccuracyModal();
    };

    const userHasAccess = (permission: number) => {
        try {
            const token = getToken();
            if (!token) return false;
            const data = decryptToJwt(token.toString());
            return data?.Permissions?.includes(permission) || false;
        } catch {
            return false;
        }
    };

    return (
        <KTCard className={`card ${className}`}>
            <div className="card-header border-0 pt-5">
                <h3 className="card-title align-items-start flex-column">
                    <span className="card-label fw-bold fs-3 mb-1">لیست پیشنهادات ایده</span> {/* Translated */}
                </h3>
                <div className="card-toolbar">
                    {/* Search Input */}
                    <div className="d-flex align-items-center position-relative my-1 ms-5">
                        <KTIcon iconName='magnifier' className='fs-3 position-absolute me-5 mx-5'/>
                        <input
                            type='text'
                            data-kt-user-table-filter='search'
                            className='form-control form-control-solid w-250px pe-13'
                            placeholder='جستجو...' // Translated placeholder
                            value={searchTerm} // Bind value to state
                            onChange={(e) => setSearchTerm(e.target.value)} // Update state on change
                            onKeyDown={(e) => {
                                if (e.key === 'Enter') {
                                    performSearch(); // Trigger search on Enter key press
                                }
                            }} // Handle Enter key press
                        />
                    </div>
                    {/* Add Idea Submission Button */}
                    <div className="d-flex justify-content-end" data-kt-idea-submissions-table-toolbar="base">
                        {userHasAccess(PermissionEnums.AddIdeaSubmissionButton) && (
                            <button
                                type="button"
                                className="btn btn-primary"
                                onClick={handleShowModal}
                            >
                                <KTIcon iconName="plus" className="fs-2" />
                                افزودن پیشنهاد ایده جدید
                            </button>
                        )}
                    </div>
                </div>
            </div>

            <KTCardBody className='py-4'>
                 {isLoading && <p>در حال بارگذاری...</p>} {/* Translated Loading Indicator */}
                 {error && <div className="alert alert-danger">{error}</div>} {/* Display Error Message */}
                 {!isLoading && !error && (
                    <div className='table-responsive'>
                        <table
                            id='kt_table_idea_submissions'
                            className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'
                        >
                            <thead>
                                {table.getHeaderGroups().map((headerGroup) => (
                                    <tr key={headerGroup.id} className='text-center text-muted fw-bolder fs-7 text-uppercase gs-0'>
                                        {headerGroup.headers.map((header) => (
                                            <th key={header.id} colSpan={header.colSpan}>
                                                {header.isPlaceholder ? null : (
                                                    flexRender(header.column.columnDef.header, header.getContext())
                                                )}
                                            </th>
                                        ))}
                                    </tr>
                                ))}
                            </thead>
                            <tbody className='text-gray-600 fw-bold'>
                                {table.getRowModel().rows.length > 0 ? (
                                    table.getRowModel().rows.map((row) => (
                                        <tr key={row.id}>
                                            {row.getVisibleCells().map((cell) => (
                                                <td key={cell.id} className='text-center'> {/* Added text-center class */}
                                                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                                                </td>
                                            ))}
                                        </tr>
                                    ))
                                ) : (
                                    <tr>
                                        <td colSpan={columns.length}>
                                            <div className='d-flex text-center w-100 align-content-center justify-content-center'>
                                                رکوردی یافت نشد {/* Translated */}
                                            </div>
                                        </td>
                                    </tr>
                                )}
                            </tbody>
                        </table>
                    </div>
                 )}
                {/* TODO: Add pagination and loading indicators if needed */}
            </KTCardBody>

            {/* Modal Component */}
            <AddIdeaSubmissionModal show={showAddModal} onClose={handleCloseModal} onSuccess={handleDataCreated} />
            <ChangeAccuracyModal
                show={showChangeAccuracyModal}
                onClose={handleCloseChangeAccuracyModal}
                submissionId={selectedSubmissionId}
                currentAccuracy={selectedSubmissionAccuracy}
                onSuccess={handleUpdateAccuracySuccess}
            />
        </KTCard>
    );
};


export default IdeaSubmissionsList;
